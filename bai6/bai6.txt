import sys

def get(a, x1, y1, x2, y2):
    if x1 == 0 or y1 == 0:
        return 0
    return a[x2][y2] - a[x1 - 1][y2] - a[x2][y1 - 1] + a[x1 - 1][y1 - 1]

def hcn_chung(rec1, rec2):
    (x1, y1), (u1, v1) = rec1
    (x2, y2), (u2, v2) = rec2
    if x1 > x2:
        rec1, rec2 = rec2, rec1
    if u1 < x2 or v1 < y2 or v2 < y1:
        return ((0, 0), (0, 0))
    return ((max(x1, x2), max(y1, y2)), (min(u1, u2), min(v1, v2)))

def main():
    n, k, r, p = map(int, input().split())
    a = [[0] * (n + 1) for _ in range(n + 1)]
    points = []
    
    for i in range(1, n + 1):
        row = list(map(int, input().split()))
        for j in range(1, n + 1):
            a[i][j] = row[j - 1]
    
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            a[i][j] += a[i - 1][j] + a[i][j - 1] - a[i - 1][j - 1]
    
    res = 0
    for _ in range(k):
        points = [tuple(map(int, input().split())) for _ in range(p)]
        sum_val = 0
        
        for mask in range(1, 1 << p):
            now = ((1, 1), (n, n))
            
            for j in range(p):
                if (mask >> j) & 1:
                    rec = ((points[j][0], points[j][1]), (points[j][0] + r - 1, points[j][1] + r - 1))
                    now = hcn_chung(now, rec)
            
            if bin(mask).count('1') % 2 == 1:
                sum_val += get(a, now[0][0], now[0][1], now[1][0], now[1][1])
            else:
                sum_val -= get(a, now[0][0], now[0][1], now[1][0], now[1][1])
        
        res = max(res, sum_val)
    
    print(res)

main()
